#ifndef _HYPERGRAPH_VIEWER_HPP
#define _HYPERGRAPH_VIEWER_HPP

#include <QWidget>
#include <QGraphicsView>
#include <QMap>
#include "Hyperedge.hpp"
#include "Hypergraph.hpp"

// Generated by MOC
namespace Ui
{
    class HypergraphViewer;
}

// Forward decls
class QGraphicsScene;
class QGraphicsView;

class Hyperedge;
class HyperedgeItem;

class HypergraphScene : public QGraphicsScene
{
    Q_OBJECT

    public:
        HypergraphScene(QObject * parent = 0);
        ~HypergraphScene();

        void addItem(QGraphicsItem *item);
        void removeItem(QGraphicsItem *item);
        Hyperedges getAllEdges()
        {
            return currentGraph.findByLabel();
        }
        Hypergraph& graph()
        {
            return currentGraph;
        }
        bool isEnabled() { return mEnabled; }
        virtual bool isLayoutEnabled() { return false; }
        QList<HyperedgeItem*> selectedHyperedgeItems();

    signals:
        // Signals emitted
        void edgeAdded(const UniqueId id);
        void edgeRemoved(const UniqueId id);
        void edgesConnected(const UniqueId fromId, const UniqueId toId);
        void itemAdded(QGraphicsItem *item);

    public slots:
        // This is the constructing function of the hyperedge scene
        virtual void visualize();
        virtual void visualize(const Hypergraph& graph);
        // Enable visualization
        virtual void setEnabled(bool enable) { mEnabled = enable; }
        // Enable layouting
        virtual void setLayoutEnabled(bool enable) {}
        virtual void updateLayout() {}
        virtual void setEquilibriumDistance(qreal distance) {}

        // Slots to modify the underlying hyperedge system
        void addEdge(const UniqueId id, const QString& label="");
        void removeEdge(const UniqueId id);
        void connectEdges(const UniqueId fromId, const UniqueId id, const UniqueId toId);
        void updateEdge(const UniqueId id, const QString& label);

    protected:
        bool mEnabled;
        Hypergraph currentGraph;
        QMap<UniqueId, HyperedgeItem*> currentItems;
};

class ForceBasedScene : public HypergraphScene
{
    Q_OBJECT

    public:
        ForceBasedScene(QObject * parent = 0);
        ~ForceBasedScene();

        virtual bool isLayoutEnabled();

    public slots:
        // Cycles through all items of a scene and updates the positions of hyperedgeitems according to their neighbours
        virtual void updateLayout();
        virtual void setEquilibriumDistance(qreal distance);
        // Enable visualization (and also Timer!)
        virtual void setEnabled(bool enable);
        // Only enable/disable layouting
        virtual void setLayoutEnabled(bool enable);

    protected:
        QTimer *mpTimer;
        qreal mEquilibriumDistance;
};

class HypergraphView : public QGraphicsView
{
    Q_OBJECT

    public:
        HypergraphView(QWidget *parent = 0);
        HypergraphView(HypergraphScene * scene, QWidget * parent = 0 );

        HypergraphScene* scene()
        {
            return dynamic_cast<HypergraphScene*>(QGraphicsView::scene());
        }

    protected:
        /// qt mouse wheel spin callback
        void wheelEvent(QWheelEvent *event);
        /// scales scene (zooms into or out of the scene)
        void scaleView(qreal scaleFactor);

        // Mouse press and release event to move view
        void mousePressEvent(QMouseEvent*);
        void mouseReleaseEvent(QMouseEvent*);
};

class HypergraphEdit : public HypergraphView
{
    Q_OBJECT

    public:
        HypergraphEdit(QWidget *parent = 0);
        HypergraphEdit(HypergraphScene * scene, QWidget * parent = 0 );

    signals:
        // emitted by setDefaultLabel()
        void labelChanged(const QString& label);

    public slots:
        // Call this to set the label of all edges to be created in the future
        void setDefaultLabel(const QString& label);

    protected:
        // Mouse press and release event to select and connect things
        void mousePressEvent(QMouseEvent*);
        void mouseMoveEvent(QMouseEvent*);
        void mouseReleaseEvent(QMouseEvent*);

        // Keyboard event to
        // a) delete edges (Del)
        // b) insert edges (Ins)
        void keyPressEvent(QKeyEvent * event);

        // DRAW_LINE mode
        bool isDrawLineMode;
        HyperedgeItem* sourceItem;
        QGraphicsLineItem *lineItem;

        // ADD NEW mode
        bool isEditLabelMode;
        QString currentLabel;
};


class HypergraphViewer : public QWidget
{
    Q_OBJECT

    public:
        HypergraphViewer(QWidget *parent = 0, bool doSetup=true);
        ~HypergraphViewer();

    signals:
        // Will be emitted by storeToYAML if generation is finished
        void YAMLStringReady(const QString& yamlString);

    public slots:
        // Load a hyperedge system (= hypergraph) from YAML file
        void loadFromYAMLFile(const QString& fileName);
        // Load a hyperedge system (= hypergraph) from YAML string
        void loadFromYAML(const QString& yamlString);
        void loadFromGraph(const Hypergraph& graph);
        // Store a hyperedge system (= hypergraph) to a YAML string
        void storeToYAML();
        // Clear everything
        void clearHypergraph();
        // Change the equilibrium distance for force based layout
        void setEquilibriumDistance(qreal distance);
        // A slot which can be called whenever the graph has changed
        void onGraphChanged(const UniqueId id);
        void onGraphChanged(QGraphicsItem* item);

    protected:
        // Triggered when widget is about to get visible
        void showEvent(QShowEvent *event);
        // Triggered when widget is about to get hidden
        void hideEvent(QHideEvent *event);

        Ui::HypergraphViewer* mpUi;

        HypergraphScene*     mpScene;
        HypergraphEdit*      mpView;
};

#endif

