#ifndef _CONCEPTGRAPH_VIEWER_HPP
#define _CONCEPTGRAPH_VIEWER_HPP

#include <QWidget>
#include <QGraphicsView>
#include <QMap>
#include "Conceptgraph.hpp"

// Generated by MOC
namespace Ui
{
    class HypergraphViewer;
}

// Forward decls
class QGraphicsScene;
class QGraphicsView;

class Conceptgraph;
class ConceptgraphItem;  // concept OR relation

class ConceptgraphScene : public QGraphicsScene
{
    Q_OBJECT

    public:
        ConceptgraphScene(QObject * parent = 0);
        ~ConceptgraphScene();

        void addItem(QGraphicsItem *item);
        void removeItem(QGraphicsItem *item);
        Hypergraph::Hyperedges getAllConcepts() // DIFFERS
        {
            return currentGraph->find();
        }
        Conceptgraph* graph()
        {
            return currentGraph;
        }

    signals:
        // Signals emitted
        void conceptAdded(const unsigned int id); // DIFFERS
        void conceptRemoved(const unsigned int id); // DIFFERS
        void relationAdded(const unsigned int id); // DIFFERS
        void relationRemoved(const unsigned int id); // DIFFERS

    public slots:
        // This is the constructing function of the conceptgraph scene
        void visualize(Conceptgraph* graph = NULL);

        // Slots to modify the underlying hyperedge system
        void addRelation(const unsigned fromId, const unsigned toId, const unsigned id=0, const QString& label=""); // DIFFERS
        void addConcept(const unsigned id=0, const QString& label=""); // DIFFERS
        void removeEdge(const unsigned id);
        void updateEdge(const unsigned int id, const QString& label);

    private:
        Conceptgraph *currentGraph;
        QMap<unsigned int, ConceptgraphItem*> currentItems;
};

class ForceBasedConceptgraphScene : public ConceptgraphScene
{
    Q_OBJECT

    public:
        ForceBasedConceptgraphScene(QObject * parent = 0);
        ~ForceBasedConceptgraphScene();

        // Adjust these if needed
        bool isEnabled();

    public slots:
        // Cycles through all items of a scene and updates the positions of ConceptgraphItems according to their neighbours
        // Calls the base class visualizer as well
        void visualize(Conceptgraph* graph = NULL);
        void setEnabled(bool enable);
        void setEquilibriumDistance(qreal distance);

    private:
        QTimer *mpTimer;
        qreal mEquilibriumDistance;
};

class ConceptgraphView : public QGraphicsView
{
    Q_OBJECT

    public:
        ConceptgraphView(QWidget *parent = 0);
        ConceptgraphView(ConceptgraphScene * scene, QWidget * parent = 0 );

        ConceptgraphScene* scene()
        {
            return dynamic_cast<ConceptgraphScene*>(QGraphicsView::scene());
        }

    protected:
        /// qt mouse wheel spin callback
        void wheelEvent(QWheelEvent *event);
        /// scales scene (zooms into or out of the scene)
        void scaleView(qreal scaleFactor);

        // Mouse press and release event to move view
        void mousePressEvent(QMouseEvent*);
        void mouseReleaseEvent(QMouseEvent*);
};

class ConceptgraphEdit : public ConceptgraphView
{
    Q_OBJECT

    public:
        ConceptgraphEdit(QWidget *parent = 0);
        ConceptgraphEdit(ConceptgraphScene * scene, QWidget * parent = 0 );

    signals:
        // emitted by setDefaultLabel()
        void labelChanged(const QString& label);

    public slots:
        // Call this to set the label of all edges to be created in the future
        void setDefaultLabel(const QString& label);

    protected:
        // Mouse press and release event to select and connect things
        void mousePressEvent(QMouseEvent*); // DIFFERS
        void mouseMoveEvent(QMouseEvent*); // DIFFERS
        void mouseReleaseEvent(QMouseEvent*); // DIFFERS

        // Keyboard event to
        // a) delete concept (Del)
        // b) insert concept (Ins)
        void keyPressEvent(QKeyEvent * event); // DIFFERS

    private:
        // DRAW_LINE mode
        bool isDrawLineMode;
        ConceptgraphItem* sourceItem;
        QGraphicsLineItem *lineItem;

        // SELECT_OBJECT mode
        ConceptgraphItem* selectedItem;

        // ADD NEW mode
        bool isEditLabelMode;
        QString currentLabel;
};


class ConceptgraphViewer : public QWidget
{
    Q_OBJECT

    public:
        ConceptgraphViewer(QWidget *parent = 0);
        ~ConceptgraphViewer();

    signals:
        // Will be emitted by storeToYAML if generation is finished
        void YAMLStringReady(const QString& yamlString);

    public slots:
        // Load a conceptgraph (= hypergraph) from YAML file
        void loadFromYAMLFile(const QString& fileName);
        // Load a conceptgraph (= hypergraph) from YAML string
        void loadFromYAML(const QString& yamlString);
        // Store a conceptgraph (= hypergraph) to a YAML string
        void storeToYAML();
        // Clear everything
        void clearConceptgraph();

    private:
        Ui::HypergraphViewer*            mpUi;

        ForceBasedConceptgraphScene*    mpScene;
        ConceptgraphEdit*               mpView;
};

#endif


