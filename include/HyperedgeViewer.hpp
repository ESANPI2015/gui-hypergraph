#ifndef _HYPEREDGE_VIEWER_HPP
#define _HYPEREDGE_VIEWER_HPP

#include <QWidget>
#include <QGraphicsView>
#include <QMap>

// Generated by MOC
namespace Ui
{
    class HyperedgeViewer;
}

// Forward decls
class QGraphicsScene;
class QGraphicsView;

class Hyperedge;
class HyperedgeItem;

class HyperedgeScene : public QGraphicsScene
{
    Q_OBJECT

    public:
        HyperedgeScene(QObject * parent = 0);
        ~HyperedgeScene();

        void addItem(QGraphicsItem *item);
        void removeItem(QGraphicsItem *item);

    signals:
        // Signals emitted
        void edgeAdded(const unsigned int id);
        void edgeRemoved(const unsigned int id);
        void edgesConnected(const unsigned int fromId, const unsigned int toId);

    public slots:
        // This is the constructing function of the hyperedge scene
        // If no pointer is given it will reconstruct from lastRoot
        void visualize(Hyperedge *root = NULL);

        // Slots to modify the underlying hyperedge system
        void addEdge(const QString& label="");
        void addEdgeAndConnect(const unsigned int toId, const QString& label="");
        void removeEdge(const unsigned int id);
        void connectEdges(const unsigned int fromId, const unsigned int toId);

    private:
        Hyperedge *lastRoot;
        QMap<unsigned int, HyperedgeItem*> currentItems;
};

class ForceBasedScene : public HyperedgeScene
{
    Q_OBJECT

    public:
        ForceBasedScene(QObject * parent = 0);
        ~ForceBasedScene();

        // Adjust these if needed
        bool isEnabled();
        void setEnabled(bool enable);
        void setEquilibriumDistance(qreal distance);

    public slots:
        // Cycles through all items of a scene and updates the positions of hyperedgeitems according to their neighbours
        // Calls the base class visualizer as well
        void visualize(Hyperedge *root = NULL);

    private:
        QTimer *mpTimer;
        qreal mEquilibriumDistance;
};

class HyperedgeView : public QGraphicsView
{
    Q_OBJECT

    public:
        HyperedgeView(QWidget *parent = 0);
        HyperedgeView(HyperedgeScene * scene, QWidget * parent = 0 );

        HyperedgeScene* scene()
        {
            return dynamic_cast<HyperedgeScene*>(QGraphicsView::scene());
        }

    protected:
        /// qt mouse wheel spin callback
        void wheelEvent(QWheelEvent *event);
        /// scales scene (zooms into or out of the scene)
        void scaleView(qreal scaleFactor);

        // Mouse press and release event to move view
        void mousePressEvent(QMouseEvent*);
        void mouseReleaseEvent(QMouseEvent*);
};

class HyperedgeEdit : public HyperedgeView
{
    Q_OBJECT

    public:
        HyperedgeEdit(QWidget *parent = 0);
        HyperedgeEdit(HyperedgeScene * scene, QWidget * parent = 0 );

    protected:
        // Mouse press and release event to select and connect things
        void mousePressEvent(QMouseEvent*);
        void mouseMoveEvent(QMouseEvent*);
        void mouseReleaseEvent(QMouseEvent*);

        // Keyboard event to
        // a) delete edges (Del)
        // TODO b) insert edges (Ins)
        void keyPressEvent(QKeyEvent * event);

    private:
        // DRAW_LINE mode
        bool isDrawLineMode;
        HyperedgeItem* sourceItem;
        QGraphicsLineItem *lineItem;

        // SELECT_OBJECT mode
        HyperedgeItem* selectedItem;
};


class HyperedgeViewer : public QWidget
{
    Q_OBJECT

    public:
        HyperedgeViewer(QWidget *parent = 0);
        ~HyperedgeViewer();

    private:
        Ui::HyperedgeViewer* mpUi;

        ForceBasedScene*    mpScene;
        HyperedgeEdit*      mpView;
};

#endif

